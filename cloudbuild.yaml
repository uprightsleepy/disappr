options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Code linting
  - name: 'golangci/golangci-lint:latest'
    id: Lint Go code
    args: ['golangci-lint', 'run', '--timeout=5m']

  # Run tests with coverage
  - name: 'golang'
    id: Run tests with coverage check
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        go test ./... -coverprofile=coverage.out
        coverage=$(go tool cover -func=coverage.out | grep total: | awk '{print substr($3, 1, length($3)-1)}')
        echo "Test coverage: $coverage%"
        
        # Extract just the number part (without the decimal)
        coverage_int=${coverage%.*}
        
        # Compare against threshold (but don't fail the build yet)
        if [ "$coverage_int" -lt 80 ]; then
          echo "Test coverage $coverage% is below threshold of 80%"
          echo "Continuing build despite low coverage"
        else
          echo "Test coverage $coverage% meets threshold of 80%"
        fi

  # Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: Build Docker image
    args:
      [
        'build',
        '-t',
        'us-central1-docker.pkg.dev/$PROJECT_ID/disappr/disappr:$SHORT_SHA',
        '.'
      ]

  # Security scan the image for vulnerabilities
  - name: 'aquasec/trivy'
    id: Scan image for vulnerabilities
    args:
      - 'image'
      - '--format=table'
      - '--exit-code=1'
      - '--severity=HIGH,CRITICAL'
      - 'us-central1-docker.pkg.dev/$PROJECT_ID/disappr/disappr:$SHORT_SHA'

  # Scan code for secrets and other security issues
  - name: 'aquasec/trivy'
    id: Scan code for secrets
    args:
      - 'fs'
      - '--security-checks=secret,vuln'
      - '--exit-code=1'
      - '.'

  # Push image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: Push image to Artifact Registry
    args: [
      'push',
      'us-central1-docker.pkg.dev/$PROJECT_ID/disappr/disappr:$SHORT_SHA'
    ]

  # Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Deploy to Cloud Run
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Update the Cloud Run service with the new image
        gcloud run services update disappr \
          --image=us-central1-docker.pkg.dev/$PROJECT_ID/disappr/disappr:$SHORT_SHA \
          --region=us-central1 \
          --project=$PROJECT_ID

images:
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/disappr/disappr:$SHORT_SHA'

# Optionally store artifacts (test coverage, scan results, etc.)
artifacts:
  objects:
    location: 'gs://$PROJECT_ID-build-artifacts/$SHORT_SHA/'
    paths: ['coverage.out']